# This is a basic workflow to help you get started with the Run Jtest action.
name: Jtest Pull Request

on:
  # Trigger the workflow on push or pull request events but only for the master branch.
  push:
    branches: [ main ]
#  pull_request:

#    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
  
jobs:
  analyze:
    name: Analyze project with Jtest
    
    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # Runs code analysis with Jtest

    - name: Run Jtest
      #id: jtest
      #working-directory: demo-project
      #run: D:/_JTest/parasoft_jtest_16.05/jtest/jtestcli.exe -config "builtin://Recommended Rules" -property report.format=xml,html,sarif -report "reports" -data demo.data.json
      #run: mvn clean jtest:jtest "-Djtest.config=builtin://Recommended Rules"
      uses: parasoft/run-jtest-action@1.0.0
      with:
        #workingDir: demo-project
        input: demo-project/jtest.data.json
        testConfig: builtin://Recommended Rules
        additionalParams: -fail -property techsupport.create.on.exit=false
        #Uses the jtest.data.json generated with the Maven command in the previous step
        
        # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: demo-project/target/jtest/report.sarif # reports is a default location for reports directory
        
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
          name: Static analysis reports
          path: demo-project/target/jtest/*.*
